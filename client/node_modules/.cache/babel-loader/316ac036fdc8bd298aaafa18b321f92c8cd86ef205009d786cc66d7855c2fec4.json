{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\n\n// Todo型の定義\n\nconst useTodo = () => {\n  _s();\n  // テキスト入力の状態を管理する state\n  const [text, setText] = useState(\"\");\n\n  // Todoアイテムの配列を管理する state\n  const [items, setItems] = useState([]);\n  // Todoアイテムを追加するボタンがクリックされたときのイベントハンドラ\n  const onAdd = async event => {\n    try {\n      // ランダムな数値でIdを生成\n      let num = Math.round(Math.random() * 100000);\n\n      //サーバーのエンドポイント\n      const endpoint = \"http://localhost:3100/todo\";\n      // 新しいTodoアイテムのデータ\n      const requestData = {\n        id: num,\n        content: text,\n        done: false\n      };\n\n      // サーバーにデータを送信\n      await axios.post(endpoint, requestData);\n      // Todoアイテムを更新\n      setItems(prevItems => [...prevItems, requestData]);\n      // テキストエリア入力\n      setText(\"\");\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n  //サーバーからデータを取得\n  const fetchData = async () => {\n    try {\n      //サーバーのエンドポイント\n      const response = await axios.get(\"http://localhost:3100/todo\");\n      console.log(response.data);\n      // レスポンスからデータを取得\n      const newData = response.data;\n      //Todoアイテムを更新\n      setItems(newData);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      // エラーが発生した場合、setItems にデフォルト値を設定する\n      setItems([]);\n    }\n  };\n\n  // todo.doneの値を逆にする\n  const Onreverse = id => {\n    setItems(prevItems => prevItems.map(item => item.id === id ? {\n      ...item,\n      done: !item.done\n    } : item));\n  };\n  const onDelete = id => {\n    axios.delete(`http://localhost:3100/todo/${id}`).then(response => {\n      console.log(\"データが削除された\", response.data);\n    }).catch(error => {\n      console.error(\"削除中にエラーが発生しました\", error);\n    });\n    setItems(prevItems => prevItems.filter(item => item.id !== id));\n  };\n  return {\n    text,\n    items,\n    setText,\n    onAdd,\n    fetchData,\n    onDelete,\n    Onreverse\n  };\n};\n_s(useTodo, \"k2XUHacTd2CXfmh8soHEz6Q6yVk=\");\nexport default useTodo;","map":{"version":3,"names":["useState","axios","useTodo","_s","text","setText","items","setItems","onAdd","event","num","Math","round","random","endpoint","requestData","id","content","done","post","prevItems","error","console","fetchData","response","get","log","data","newData","Onreverse","map","item","onDelete","delete","then","catch","filter"],"sources":["C:/todoapp02/client/src/hooks/useTodo.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n// Todo型の定義\r\ntype Todo = {\r\n  id: number;\r\n  content: string;\r\n  done: boolean;\r\n};\r\n\r\ntype useTodoReturn = {\r\n  text: string;\r\n  items: Todo[];\r\n  setText: React.Dispatch<React.SetStateAction<string>>;\r\n  onAdd: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n  fetchData: () => Promise<void>;\r\n  onDelete: (id: number) => void;\r\n  Onreverse: (id: number) => void;\r\n};\r\n\r\nconst useTodo = (): useTodoReturn => {\r\n  // テキスト入力の状態を管理する state\r\n  const [text, setText] = useState<string>(\"\");\r\n\r\n  // Todoアイテムの配列を管理する state\r\n  const [items, setItems] = useState<Todo[]>([]);\r\n  // Todoアイテムを追加するボタンがクリックされたときのイベントハンドラ\r\n  const onAdd = async (\r\n    event: React.MouseEvent<HTMLButtonElement>\r\n  ): Promise<void> => {\r\n    try {\r\n      // ランダムな数値でIdを生成\r\n      let num: number = Math.round(Math.random() * 100000);\r\n\r\n      //サーバーのエンドポイント\r\n      const endpoint = \"http://localhost:3100/todo\";\r\n      // 新しいTodoアイテムのデータ\r\n      const requestData: Todo = {\r\n        id: num,\r\n        content: text,\r\n        done: false,\r\n      };\r\n\r\n      // サーバーにデータを送信\r\n      await axios.post(endpoint, requestData);\r\n      // Todoアイテムを更新\r\n      setItems((prevItems) => [...prevItems, requestData]);\r\n      // テキストエリア入力\r\n      setText(\"\");\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    }\r\n  };\r\n  //サーバーからデータを取得\r\n  const fetchData = async (): Promise<void> => {\r\n    try {\r\n      //サーバーのエンドポイント\r\n      const response = await axios.get(\"http://localhost:3100/todo\");\r\n      console.log(response.data);\r\n      // レスポンスからデータを取得\r\n      const newData: Todo[] = response.data;\r\n      //Todoアイテムを更新\r\n      setItems(newData);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n      // エラーが発生した場合、setItems にデフォルト値を設定する\r\n      setItems([]);\r\n    }\r\n  };\r\n\r\n  // todo.doneの値を逆にする\r\n  const Onreverse = (id: number): void => {\r\n    setItems((prevItems) =>\r\n      prevItems.map((item) =>\r\n        item.id === id ? { ...item, done: !item.done } : item\r\n      )\r\n    );\r\n  };\r\n\r\n  const onDelete = (id: number): void => {\r\n    axios\r\n      .delete(`http://localhost:3100/todo/${id}`)\r\n      .then((response) => {\r\n        console.log(\"データが削除された\", response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"削除中にエラーが発生しました\", error);\r\n      });\r\n    setItems((prevItems) => prevItems.filter((item) => item.id !== id));\r\n  };\r\n\r\n  return {\r\n    text,\r\n    items,\r\n    setText,\r\n    onAdd,\r\n    fetchData,\r\n    onDelete,\r\n    Onreverse,\r\n  };\r\n};\r\n\r\nexport default useTodo;\r\nexport type { Todo };\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAmB,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;;AAEzB;;AAiBA,MAAMC,OAAO,GAAGA,CAAA,KAAqB;EAAAC,EAAA;EACnC;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAS,EAAE,CAAC;;EAE5C;EACA,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAS,EAAE,CAAC;EAC9C;EACA,MAAMQ,KAAK,GAAG,MACZC,KAA0C,IACxB;IAClB,IAAI;MACF;MACA,IAAIC,GAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC;;MAEpD;MACA,MAAMC,QAAQ,GAAG,4BAA4B;MAC7C;MACA,MAAMC,WAAiB,GAAG;QACxBC,EAAE,EAAEN,GAAG;QACPO,OAAO,EAAEb,IAAI;QACbc,IAAI,EAAE;MACR,CAAC;;MAED;MACA,MAAMjB,KAAK,CAACkB,IAAI,CAACL,QAAQ,EAAEC,WAAW,CAAC;MACvC;MACAR,QAAQ,CAAEa,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAEL,WAAW,CAAC,CAAC;MACpD;MACAV,OAAO,CAAC,EAAE,CAAC;IACb,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;EACD;EACA,MAAME,SAAS,GAAG,MAAAA,CAAA,KAA2B;IAC3C,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,GAAG,CAAC,4BAA4B,CAAC;MAC9DH,OAAO,CAACI,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC;MAC1B;MACA,MAAMC,OAAe,GAAGJ,QAAQ,CAACG,IAAI;MACrC;MACApB,QAAQ,CAACqB,OAAO,CAAC;IACnB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C;MACAd,QAAQ,CAAC,EAAE,CAAC;IACd;EACF,CAAC;;EAED;EACA,MAAMsB,SAAS,GAAIb,EAAU,IAAW;IACtCT,QAAQ,CAAEa,SAAS,IACjBA,SAAS,CAACU,GAAG,CAAEC,IAAI,IACjBA,IAAI,CAACf,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGe,IAAI;MAAEb,IAAI,EAAE,CAACa,IAAI,CAACb;IAAK,CAAC,GAAGa,IACnD,CACF,CAAC;EACH,CAAC;EAED,MAAMC,QAAQ,GAAIhB,EAAU,IAAW;IACrCf,KAAK,CACFgC,MAAM,CAAE,8BAA6BjB,EAAG,EAAC,CAAC,CAC1CkB,IAAI,CAAEV,QAAQ,IAAK;MAClBF,OAAO,CAACI,GAAG,CAAC,WAAW,EAAEF,QAAQ,CAACG,IAAI,CAAC;IACzC,CAAC,CAAC,CACDQ,KAAK,CAAEd,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACxC,CAAC,CAAC;IACJd,QAAQ,CAAEa,SAAS,IAAKA,SAAS,CAACgB,MAAM,CAAEL,IAAI,IAAKA,IAAI,CAACf,EAAE,KAAKA,EAAE,CAAC,CAAC;EACrE,CAAC;EAED,OAAO;IACLZ,IAAI;IACJE,KAAK;IACLD,OAAO;IACPG,KAAK;IACLe,SAAS;IACTS,QAAQ;IACRH;EACF,CAAC;AACH,CAAC;AAAC1B,EAAA,CAhFID,OAAO;AAkFb,eAAeA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}