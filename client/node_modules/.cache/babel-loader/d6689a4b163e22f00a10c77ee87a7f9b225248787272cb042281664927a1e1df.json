{"ast":null,"code":"import{useState}from\"react\";import axios from\"axios\";// Todo型の定義\nconst useTodo=()=>{// テキスト入力の状態を管理する state\nconst[text,setText]=useState(\"\");// Todoアイテムの配列を管理する state\nconst[items,setItems]=useState([]);// Todoアイテムを追加するボタンがクリックされたときのイベントハンドラ\nconst onAdd=async event=>{try{// ランダムな数値でIdを生成\nlet num=Math.round(Math.random()*100000);//サーバーのエンドポイント\nconst endpoint=\"http://localhost:3100/todo\";// 新しいTodoアイテムのデータ\nconst requestData={id:num,content:text,done:false};// サーバーにデータを送信\nawait axios.post(endpoint,requestData);// Todoアイテムを更新\nsetItems(prevItems=>[...prevItems,requestData]);// テキストエリア入力\nsetText(\"\");}catch(error){console.error(\"Error:\",error);}};//サーバーからデータを取得\nconst fetchData=async()=>{try{//サーバーのエンドポイント\nconst response=await axios.get(\"http://localhost:3100/todo\");console.log(response.data);// レスポンスからデータを取得\nconst newData=response.data;//Todoアイテムを更新\nsetItems(newData);}catch(error){console.error(\"Error fetching data:\",error);// エラーが発生した場合、setItems にデフォルト値を設定する\nsetItems([]);}};// todo.doneの値を逆にする\nconst Onreverse=id=>{setItems(prevItems=>prevItems.map(item=>item.id===id?{...item,done:!item.done}:item));};const onDelete=id=>{axios.delete(\"http://localhost:3100/todo/\".concat(id)).then(response=>{console.log(\"データが削除された\",response.data);}).catch(error=>{console.error(\"削除中にエラーが発生しました\",error);});setItems(prevItems=>prevItems.filter(item=>item.id!==id));};return{text,items,setText,onAdd,fetchData,onDelete,Onreverse};};export default useTodo;","map":{"version":3,"names":["useState","axios","useTodo","text","setText","items","setItems","onAdd","event","num","Math","round","random","endpoint","requestData","id","content","done","post","prevItems","error","console","fetchData","response","get","log","data","newData","Onreverse","map","item","onDelete","delete","concat","then","catch","filter"],"sources":["C:/todoapp02/client/src/hooks/useTodo.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n// Todo型の定義\r\ntype Todo = {\r\n  id: number;\r\n  content: string;\r\n  done: boolean;\r\n};\r\n\r\ntype useTodoReturn = {\r\n  text: string;\r\n  items: Todo[];\r\n  setText: React.Dispatch<React.SetStateAction<string>>;\r\n  onAdd: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n  fetchData: () => Promise<void>;\r\n  onDelete: (id: number) => void;\r\n  Onreverse: (id: number) => void;\r\n};\r\n\r\nconst useTodo = (): useTodoReturn => {\r\n  // テキスト入力の状態を管理する state\r\n  const [text, setText] = useState<string>(\"\");\r\n\r\n  // Todoアイテムの配列を管理する state\r\n  const [items, setItems] = useState<Todo[]>([]);\r\n  // Todoアイテムを追加するボタンがクリックされたときのイベントハンドラ\r\n  const onAdd = async (\r\n    event: React.MouseEvent<HTMLButtonElement>\r\n  ): Promise<void> => {\r\n    try {\r\n      // ランダムな数値でIdを生成\r\n      let num: number = Math.round(Math.random() * 100000);\r\n\r\n      //サーバーのエンドポイント\r\n      const endpoint = \"http://localhost:3100/todo\";\r\n      // 新しいTodoアイテムのデータ\r\n      const requestData: Todo = {\r\n        id: num,\r\n        content: text,\r\n        done: false,\r\n      };\r\n\r\n      // サーバーにデータを送信\r\n      await axios.post(endpoint, requestData);\r\n      // Todoアイテムを更新\r\n      setItems((prevItems) => [...prevItems, requestData]);\r\n      // テキストエリア入力\r\n      setText(\"\");\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    }\r\n  };\r\n  //サーバーからデータを取得\r\n  const fetchData = async (): Promise<void> => {\r\n    try {\r\n      //サーバーのエンドポイント\r\n      const response = await axios.get(\"http://localhost:3100/todo\");\r\n      console.log(response.data);\r\n      // レスポンスからデータを取得\r\n      const newData: Todo[] = response.data;\r\n      //Todoアイテムを更新\r\n      setItems(newData);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n      // エラーが発生した場合、setItems にデフォルト値を設定する\r\n      setItems([]);\r\n    }\r\n  };\r\n\r\n  // todo.doneの値を逆にする\r\n  const Onreverse = (id: number): void => {\r\n    setItems((prevItems) =>\r\n      prevItems.map((item) =>\r\n        item.id === id ? { ...item, done: !item.done } : item\r\n      )\r\n    );\r\n  };\r\n\r\n  const onDelete = (id: number): void => {\r\n    axios\r\n      .delete(`http://localhost:3100/todo/${id}`)\r\n      .then((response) => {\r\n        console.log(\"データが削除された\", response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"削除中にエラーが発生しました\", error);\r\n      });\r\n    setItems((prevItems) => prevItems.filter((item) => item.id !== id));\r\n  };\r\n\r\n  return {\r\n    text,\r\n    items,\r\n    setText,\r\n    onAdd,\r\n    fetchData,\r\n    onDelete,\r\n    Onreverse,\r\n  };\r\n};\r\n\r\nexport default useTodo;\r\nexport type { Todo };\r\n"],"mappings":"AAAA,OAASA,QAAQ,KAAmB,OAAO,CAC3C,MAAO,CAAAC,KAAK,KAAM,OAAO,CAEzB;AAiBA,KAAM,CAAAC,OAAO,CAAGA,CAAA,GAAqB,CACnC;AACA,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGJ,QAAQ,CAAS,EAAE,CAAC,CAE5C;AACA,KAAM,CAACK,KAAK,CAAEC,QAAQ,CAAC,CAAGN,QAAQ,CAAS,EAAE,CAAC,CAC9C;AACA,KAAM,CAAAO,KAAK,CAAG,KACZ,CAAAC,KAA0C,EACxB,CAClB,GAAI,CACF;AACA,GAAI,CAAAC,GAAW,CAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,MAAM,CAAC,CAEpD;AACA,KAAM,CAAAC,QAAQ,CAAG,4BAA4B,CAC7C;AACA,KAAM,CAAAC,WAAiB,CAAG,CACxBC,EAAE,CAAEN,GAAG,CACPO,OAAO,CAAEb,IAAI,CACbc,IAAI,CAAE,KACR,CAAC,CAED;AACA,KAAM,CAAAhB,KAAK,CAACiB,IAAI,CAACL,QAAQ,CAAEC,WAAW,CAAC,CACvC;AACAR,QAAQ,CAAEa,SAAS,EAAK,CAAC,GAAGA,SAAS,CAAEL,WAAW,CAAC,CAAC,CACpD;AACAV,OAAO,CAAC,EAAE,CAAC,CACb,CAAE,MAAOgB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,CAAEA,KAAK,CAAC,CAChC,CACF,CAAC,CACD;AACA,KAAM,CAAAE,SAAS,CAAG,KAAAA,CAAA,GAA2B,CAC3C,GAAI,CACF;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAtB,KAAK,CAACuB,GAAG,CAAC,4BAA4B,CAAC,CAC9DH,OAAO,CAACI,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC,CAC1B;AACA,KAAM,CAAAC,OAAe,CAAGJ,QAAQ,CAACG,IAAI,CACrC;AACApB,QAAQ,CAACqB,OAAO,CAAC,CACnB,CAAE,MAAOP,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C;AACAd,QAAQ,CAAC,EAAE,CAAC,CACd,CACF,CAAC,CAED;AACA,KAAM,CAAAsB,SAAS,CAAIb,EAAU,EAAW,CACtCT,QAAQ,CAAEa,SAAS,EACjBA,SAAS,CAACU,GAAG,CAAEC,IAAI,EACjBA,IAAI,CAACf,EAAE,GAAKA,EAAE,CAAG,CAAE,GAAGe,IAAI,CAAEb,IAAI,CAAE,CAACa,IAAI,CAACb,IAAK,CAAC,CAAGa,IACnD,CACF,CAAC,CACH,CAAC,CAED,KAAM,CAAAC,QAAQ,CAAIhB,EAAU,EAAW,CACrCd,KAAK,CACF+B,MAAM,+BAAAC,MAAA,CAA+BlB,EAAE,CAAE,CAAC,CAC1CmB,IAAI,CAAEX,QAAQ,EAAK,CAClBF,OAAO,CAACI,GAAG,CAAC,WAAW,CAAEF,QAAQ,CAACG,IAAI,CAAC,CACzC,CAAC,CAAC,CACDS,KAAK,CAAEf,KAAK,EAAK,CAChBC,OAAO,CAACD,KAAK,CAAC,gBAAgB,CAAEA,KAAK,CAAC,CACxC,CAAC,CAAC,CACJd,QAAQ,CAAEa,SAAS,EAAKA,SAAS,CAACiB,MAAM,CAAEN,IAAI,EAAKA,IAAI,CAACf,EAAE,GAAKA,EAAE,CAAC,CAAC,CACrE,CAAC,CAED,MAAO,CACLZ,IAAI,CACJE,KAAK,CACLD,OAAO,CACPG,KAAK,CACLe,SAAS,CACTS,QAAQ,CACRH,SACF,CAAC,CACH,CAAC,CAED,cAAe,CAAA1B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}